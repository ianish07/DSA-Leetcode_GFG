class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        int l=0,r=nums.size()-1,ans;
        if(nums.size()==1)
            return 0;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(mid>0 && mid < nums.size()-1)
            {
            if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1])
            {ans= mid;break;}
            else if(nums[mid-1]>nums[mid])
                r = mid-1;
            else if(nums[mid+1]>nums[mid])
                l = mid+1;
            }
            else if(mid==0)
            {
                if(nums[mid]>nums[mid+1])
                    return 0;
                else
                    return 1;                
            }
            else if(mid==nums.size()-1)
            {
                if(nums[mid]>nums[mid-1])
                    return nums.size()-1;
                else
                    return nums.size()-2;
            }
        }
        return ans;
    }
};

//simpler
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
         int low = 0;
        int high = nums.size()-1;
        
        while(low < high)
        {
            int mid1 = (low+high)/2;
            int mid2 = mid1+1;
            if(nums[mid1] < nums[mid2])
                low = mid2;
            else
                high = mid1;
        }
        return low;
    }
};