
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        if(nums.empty())
            return {-1,-1};
        int n = nums.size();
        int l=0,r = n-1;
        vector<int> ans(2,-1);
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(nums[mid]==target)
                ans[0]=mid;
            
            if(nums[mid]>=target)
                r=mid-1;
            else
                l=mid+1;
        }
        //if we have start index then only look for right
        if(ans[0]==-1)
            return ans;
        else    
            r=n-1;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(nums[mid]==target)
                ans[1]=mid;
            
            if(nums[mid]<=target)
                l=mid+1;
            else
                r=mid-1;
        }
            
        return ans;
    }
};


//lil diff


class Solution {
public:
    
    vector<int> searchRange(vector<int>& nums, int target) {
      
        if(nums.empty())
            return {-1,-1};
     int l = 0, r = nums.size() - 1;
    vector<int> ret(2, -1);
    // Search for the left one
    while (l < r)
    {
        int mid = (l + r) /2;
        if (nums[mid] < target) l = mid + 1;
        else r = mid-1;
    }
    if (nums[l]!=target) return ret;
    else ret[0] = l;
    
    // Search for the right one
    r = nums.size()-1;  // We don't have to set i to 0 the second time.
    while (l < r)
    {
        int mid = (l + r) /2 + 1;	// Make mid biased to the right
        if (nums[mid] > target) r = mid - 1;  
        else l = mid+1;				// So that this won't make the search range stuck.
    }
    ret[1] = r;
    return ret; 
    }
};