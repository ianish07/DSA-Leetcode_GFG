class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        
        priority_queue<pair<int,vector<int>>> maxh;
        vector<vector<int>> v;
        
       for(int i=0;i<points.size();i++)
        {
            int dist = pow(points[i][0],2)+pow(points[i][1],2);
            maxh.push({dist, {points[i][0],points[i][1]}});
            if(maxh.size()>K)
            {
                maxh.pop();
            }       
            
        }
        while(maxh.size()>0)
        {
            v.push_back(maxh.top().second);
            maxh.pop();
        }
        return v;
    }
};

//better

class Solution {
public:
    int dist( vector<int> &point ) {
        return point[0]*point[0] + point[1]*point[1];    
    }
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        typedef pair<int, int> pi;
        
        int distance;
        priority_queue< pi > maxHeap; // <distance, index> pair
        for( int i=0; i < points.size(); i++ ) {
            distance = dist( points[i] );
            if( maxHeap.size() < K )
                maxHeap.push( { distance, i } );
            else if( distance < maxHeap.top().first ) {
                    maxHeap.push( { distance, i } );
                    maxHeap.pop();
            }
        }
        
        vector<vector<int>> result;
        while( !maxHeap.empty() ) {
            result.push_back( points[ maxHeap.top().second ] );
            maxHeap.pop();
        }
        return result;
    }
};